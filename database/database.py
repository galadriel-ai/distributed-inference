import datetime
from typing import Optional

from sqlalchemy import ARRAY
from sqlalchemy import BigInteger
from sqlalchemy import Boolean
from sqlalchemy import Column
from sqlalchemy import Date
from sqlalchemy import DateTime
from sqlalchemy import Enum
from sqlalchemy import func
from sqlalchemy import Float
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import Numeric
from sqlalchemy import String
from sqlalchemy import UniqueConstraint
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Session
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from uuid_extensions import uuid7
from enum import Enum as PyEnum

engine = None
session_maker: Optional[sessionmaker] = None

Base = declarative_base()

FREE_TIER_UUID = "06706644-2409-7efd-8000-3371c5d632d3"
PAID_TIER_UUID = "01928f3a-2f73-7c45-959e-a3e170c49a45"


class UsageTier(Base):
    __tablename__ = "usage_tier"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    name = Column(String(), nullable=False, unique=True)
    description = Column(String(), nullable=True)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UsageLimit(Base):
    __tablename__ = "usage_limit"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    usage_tier_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UsageTier.id),
        nullable=False,
        server_default=FREE_TIER_UUID,
    )
    model_name = Column(String(), nullable=False)
    max_tokens_per_minute = Column(Integer(), nullable=True)
    max_tokens_per_day = Column(Integer(), nullable=True)
    max_requests_per_minute = Column(Integer(), nullable=True)
    max_requests_per_day = Column(Integer(), nullable=True)

    price_per_million_tokens = Column(Numeric(precision=10, scale=6), nullable=True)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UserProfile(Base):
    __tablename__ = "user_profile"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    name = Column(String(), nullable=False)
    username = Column(String(), nullable=True, unique=True)
    email = Column(String(), nullable=False)
    authentication_id = Column(String(), nullable=True)
    # Just for tracking purposes to understand if user went through the authentication flow
    is_password_set = Column(Boolean(), nullable=False, default=False)
    profile_data = Column(JSON, nullable=True)
    usage_tier_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UsageTier.id),
        nullable=False,
        server_default=FREE_TIER_UUID,
    )
    terms_of_service_agreement_at = Column(DateTime, nullable=True)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UserCredits(Base):
    __tablename__ = "user_credits"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    # precision is 10 digits and 10 after decimal
    credits = Column(Numeric(precision=20, scale=10), nullable=False)
    currency = Column(String, nullable=False)
    __table_args__ = (
        UniqueConstraint("user_profile_id", "currency", name="uq_user_credits"),
    )
    last_credit_calculation_at = Column(DateTime, nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UserCreditsAddition(Base):
    __tablename__ = "user_credits_addition"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_credits_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserCredits.id),
        nullable=False,
    )
    # precision is 10 digits and 10 after decimal
    credits_change = Column(Numeric(precision=20, scale=10), nullable=False)
    currency = Column(String, nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class ApiKey(Base):
    __tablename__ = "api_key"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    api_key = Column(String(), nullable=False, unique=True)
    is_deleted = Column(Boolean(), nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeInfo(Base):
    __tablename__ = "node_info"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
        unique=False,
    )
    name = Column(String(), nullable=False)
    __table_args__ = (
        UniqueConstraint("user_profile_id", "name", name="uq_node_info_name"),
    )
    name_alias = Column(String(), nullable=False)

    gpu_model = Column(String(), nullable=True)
    gpu_count = Column(Integer(), nullable=True)
    vram = Column(Integer(), nullable=True)  # VRAM in MB
    cpu_model = Column(String(), nullable=True)
    cpu_count = Column(Integer(), nullable=True)  # Core count
    ram = Column(Integer(), nullable=True)  # RAM in MB
    power_limit = Column(Integer(), nullable=True)  # Max GPU power in Watts
    network_download_speed = Column(
        Float(), nullable=True
    )  # Network download speed in Mbps
    network_upload_speed = Column(
        Float(), nullable=True
    )  # Network upload speed in Mbps
    operating_system = Column(String(), nullable=True)
    version = Column(String(), nullable=True)

    is_archived = Column(Boolean(), nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeStatus(PyEnum):
    RUNNING = "RUNNING"
    RUNNING_BENCHMARKING = "RUNNING_BENCHMARKING"
    RUNNING_DEGRADED = "RUNNING_DEGRADED"
    RUNNING_DISABLED = "RUNNING_DISABLED"
    STOPPED = "STOPPED"
    STOPPED_BENCHMARK_FAILED = "STOPPED_BENCHMARK_FAILED"
    STOPPED_DEGRADED = "STOPPED_DEGRADED"
    STOPPED_DISABLED = "STOPPED_DISABLED"


class BackendHost(PyEnum):
    DISTRIBUTED_INFERENCE_EU = "DISTRIBUTED_INFERENCE_EU"
    DISTRIBUTED_INFERENCE_US = "DISTRIBUTED_INFERENCE_US"


class NodeMetrics(Base):
    __tablename__ = "node_metrics"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    node_info_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
        unique=True,
    )
    requests_served = Column(Integer(), nullable=False, default=0, server_default="0")
    requests_successful = Column(
        Integer(), nullable=False, default=0, server_default="0"
    )
    requests_failed = Column(Integer(), nullable=False, default=0, server_default="0")
    rtt = Column(Integer(), nullable=True)  # In ms
    time_to_first_token = Column(Float(), nullable=True)  # In seconds
    inference_tokens_per_second = Column(Float(), nullable=True)
    uptime = Column(
        Integer(), nullable=False, default=0, server_default="0"
    )  # In seconds
    connected_at = Column(DateTime, nullable=True)
    connected_host = Column(Enum(BackendHost), nullable=True)
    model_name = Column(String, nullable=True)
    status = Column(Enum(NodeStatus), nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeBenchmark(Base):
    __tablename__ = "node_benchmark"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    node_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
        unique=True,
    )
    model_name = Column(String(), nullable=False)
    tokens_per_second = Column(Float(), nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UsageTokens(Base):
    __tablename__ = "usage_tokens"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    consumer_user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    producer_node_info_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
    )
    model_name = Column(String(), nullable=False)
    completion_tokens = Column(Integer(), nullable=False)
    prompt_tokens = Column(Integer(), nullable=False)
    total_tokens = Column(Integer(), nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeHealth(Base):
    __tablename__ = "node_health"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    node_info_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
    )
    cpu_percent = Column(Integer(), nullable=False)
    ram_percent = Column(Integer(), nullable=False)
    disk_percent = Column(Integer(), nullable=False)
    gpu_percent = Column(ARRAY(Integer), nullable=False, default=[])
    vram_percent = Column(ARRAY(Integer), nullable=False, default=[])
    power_percent = Column(ARRAY(Integer), nullable=False, default=[])

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UserModelUsage24h(Base):
    __tablename__ = "user_model_usage_24h"

    user_profile_id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        nullable=False,
    )
    model_name = Column(String(), primary_key=True, nullable=False)
    usage_date = Column(
        Date,
        primary_key=True,
        nullable=False,
        default=datetime.date.today,
        server_default=func.current_date(),
    )
    tokens_consumed = Column(BigInteger, default=0, nullable=False, server_default="0")
    requests_count = Column(BigInteger, default=0, nullable=False, server_default="0")

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class VerifiedCompletions(Base):
    __tablename__ = "verified_completions"
    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        nullable=False,
    )
    hash = Column(String(), nullable=False, index=True)
    api_key = Column(String(), nullable=False, index=True)
    request = Column(JSON, nullable=False)
    response = Column(JSON, nullable=False)
    public_key = Column(String(), nullable=False)
    signature = Column(String(), nullable=False)
    attestation = Column(String(), nullable=False)
    tx_hash = Column(String(), nullable=True)
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(DateTime, nullable=False)


class Agent(Base):
    __tablename__ = "agents"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    name = Column(String(), nullable=False)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    docker_image = Column(String(), nullable=False)
    env_vars = Column(JSON, nullable=True)

    is_deleted = Column(Boolean, nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class AgentInstance(Base):
    __tablename__ = "agent_instance"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    agent_id = Column(UUID(as_uuid=True), ForeignKey(Agent.id), nullable=False)
    enclave_cid = Column(String(), nullable=True)
    is_deleted = Column(Boolean, nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class AgentLogs(Base):
    __tablename__ = "agent_logs"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    agent_id = Column(UUID(as_uuid=True), ForeignKey(Agent.id), nullable=False)

    text = Column(String(), nullable=False)
    log_created_at = Column(DateTime, nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


def get_connection() -> Session:
    return session_maker()
