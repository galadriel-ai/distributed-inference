import datetime
from typing import Optional

import sqlalchemy
from sqlalchemy import ARRAY
from sqlalchemy import Boolean
from sqlalchemy import Column
from sqlalchemy import DateTime
from sqlalchemy import Float
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy import UniqueConstraint
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Session
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from uuid_extensions import uuid7

engine = None
session_maker: Optional[sessionmaker] = None

Base = declarative_base()

FREE_TIER_UUID = "06706644-2409-7efd-8000-3371c5d632d3"


class UsageTier(Base):
    __tablename__ = "usage_tier"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    name = Column(String(), nullable=False, unique=True)
    description = Column(String(), nullable=True)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UsageLimit(Base):
    __tablename__ = "usage_limit"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    usage_tier_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UsageTier.id),
        nullable=False,
        server_default=FREE_TIER_UUID,
    )
    model_name = Column(String(), nullable=False)
    max_tokens_per_minute = Column(Integer(), nullable=True)
    max_tokens_per_day = Column(Integer(), nullable=True)
    max_requests_per_minute = Column(Integer(), nullable=True)
    max_requests_per_day = Column(Integer(), nullable=True)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UserProfile(Base):
    __tablename__ = "user_profile"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    name = Column(String(), nullable=False)
    username = Column(String(), nullable=True, unique=True)
    email = Column(String(), nullable=False)
    authentication_id = Column(String(), nullable=True)
    # Just for tracking purposes to understand if user went through the authentication flow
    is_password_set = Column(Boolean(), nullable=False, default=False)
    profile_data = Column(JSON, nullable=True)
    usage_tier_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UsageTier.id),
        nullable=False,
        server_default=FREE_TIER_UUID,
    )
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class ApiKey(Base):
    __tablename__ = "api_key"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    api_key = Column(String(), nullable=False, unique=True)
    is_deleted = Column(Boolean(), nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeInfo(Base):
    __tablename__ = "node_info"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
        unique=False,
    )
    name = Column(String(), nullable=False)
    __table_args__ = (
        UniqueConstraint("user_profile_id", "name", name="uq_node_info_name"),
    )
    name_alias = Column(String(), nullable=False)

    gpu_model = Column(String(), nullable=True)
    gpu_count = Column(Integer(), nullable=True)
    vram = Column(Integer(), nullable=True)  # VRAM in MB
    cpu_model = Column(String(), nullable=True)
    cpu_count = Column(Integer(), nullable=True)  # Core count
    ram = Column(Integer(), nullable=True)  # RAM in MB
    network_download_speed = Column(
        Float(), nullable=True
    )  # Network download speed in Mbps
    network_upload_speed = Column(
        Float(), nullable=True
    )  # Network upload speed in Mbps
    operating_system = Column(String(), nullable=True)
    version = Column(String(), nullable=True)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeMetrics(Base):
    __tablename__ = "node_metrics"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    node_info_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
        unique=True,
    )
    requests_served = Column(Integer(), nullable=False, default=0, server_default="0")
    requests_successful = Column(
        Integer(), nullable=False, default=0, server_default="0"
    )
    requests_failed = Column(Integer(), nullable=False, default=0, server_default="0")
    rtt = Column(Integer(), nullable=True)  # In ms
    time_to_first_token = Column(Float(), nullable=True)  # In seconds
    inference_tokens_per_second = Column(Float(), nullable=True)
    uptime = Column(
        Integer(), nullable=False, default=0, server_default="0"
    )  # In seconds
    connected_at = Column(DateTime, nullable=True)
    model_name = Column(String, nullable=True)
    is_healthy = Column(Boolean, nullable=False, default=True, server_default="true")

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeBenchmark(Base):
    __tablename__ = "node_benchmark"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    node_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
        unique=False,
    )
    model_name = Column(String(), nullable=False)
    tokens_per_second = Column(Float(), nullable=False)

    __table_args__ = (UniqueConstraint("node_id", "model_name", name="uq_node_model"),)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UsageTokens(Base):
    __tablename__ = "usage_tokens"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    consumer_user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    producer_node_info_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
    )
    model_name = Column(String(), nullable=False)
    completion_tokens = Column(Integer(), nullable=False)
    prompt_tokens = Column(Integer(), nullable=False)
    total_tokens = Column(Integer(), nullable=False)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class NodeHealth(Base):
    __tablename__ = "node_health"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    node_info_id = Column(
        UUID(as_uuid=True),
        ForeignKey(NodeInfo.id),
        nullable=False,
    )
    cpu_percent = Column(Integer(), nullable=False)
    ram_percent = Column(Integer(), nullable=False)
    disk_percent = Column(Integer(), nullable=False)
    gpu_percent = Column(ARRAY(Integer), nullable=False, default=[])
    vram_percent = Column(ARRAY(Integer), nullable=False, default=[])

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


def init(user, password, db, host="localhost", port=5432):
    global engine
    global session_maker
    if not engine:
        url = "postgresql://{}:{}@{}:{}/{}"
        url = url.format(user, password, host, port, db)

        # The return value of create_engine() is our connection object
        engine = sqlalchemy.create_engine(url, client_encoding="utf8", pool_size=1)
        session_maker = sessionmaker(bind=engine)


def get_connection() -> Session:
    return session_maker()
