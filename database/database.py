import datetime
from typing import Optional

import sqlalchemy
from sqlalchemy import Column
from sqlalchemy import DateTime
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy import Integer
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Session
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from uuid_extensions import uuid7

engine = None
session_maker: Optional[sessionmaker] = None

Base = declarative_base()


class UserProfile(Base):
    __tablename__ = "user_profile"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7, index=True)
    name = Column(String(), nullable=False)
    email = Column(String(), nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class ApiKey(Base):
    __tablename__ = "api_key"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7, index=True)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    api_key = Column(String(), nullable=False, unique=True)
    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class UsageTokens(Base):
    __tablename__ = "usage_tokens"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7, index=True)
    consumer_user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    producer_user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    model_name = Column(String(), nullable=False)
    completion_tokens = Column(Integer(), nullable=False)
    prompt_tokens = Column(Integer(), nullable=False)
    total_tokens = Column(Integer(), nullable=False)


def init(user, password, db, host="localhost", port=5432):
    global engine
    global session_maker
    if not engine:
        url = "postgresql://{}:{}@{}:{}/{}"
        url = url.format(user, password, host, port, db)

        # The return value of create_engine() is our connection object
        engine = sqlalchemy.create_engine(url, client_encoding="utf8", pool_size=1)
        session_maker = sessionmaker(bind=engine)


def get_connection() -> Session:
    return session_maker()
