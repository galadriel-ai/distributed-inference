"""Add node_info table new required columns name and name_alias

Revision ID: 000000000015
Revises: 000000000014
Create Date: 2024-09-16 10:42:24.759839

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "000000000015"
down_revision = "000000000014"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("node_info", sa.Column("name", sa.String(), nullable=True))
    op.execute(
        """
    UPDATE node_info
    SET name = id::TEXT;
    """
    )
    op.add_column("node_info", sa.Column("name_alias", sa.String(), nullable=True))
    op.execute(
        """
    UPDATE node_info
    SET name_alias = id::TEXT;
    """
    )

    op.create_unique_constraint(
        "uq_node_info_name", "node_info", ["user_profile_id", "name"]
    )
    op.alter_column("node_info", "name", existing_type=sa.String(), nullable=False)
    op.alter_column("node_info", "name_alias", existing_type=sa.String(), nullable=False)

    op.alter_column(
        "usage_tokens", "producer_node_info_id", existing_type=sa.UUID(), nullable=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "usage_tokens", "producer_node_info_id", existing_type=sa.UUID(), nullable=True
    )
    op.drop_constraint("uq_node_info_name", "node_info", type_="unique")
    op.drop_column("node_info", "name_alias")
    op.drop_column("node_info", "name")
    # ### end Alembic commands ###
