"""Sets NodeInfo as the producer of tokens

Revision ID: 000000000014
Revises: 000000000013
Create Date: 2024-09-13 16:09:16.080775

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "000000000014"
down_revision = "000000000013"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "usage_tokens", sa.Column("producer_node_info_id", sa.UUID(), nullable=True)
    )
    # Populating the producer_node_info_id with a first node that the user has.
    # This is accurate enough for current stage and the best we can do anyways.
    op.execute(
        """
    UPDATE usage_tokens
    SET producer_node_info_id = (
        SELECT node_info.id
        FROM node_info
        WHERE node_info.user_profile_id = usage_tokens.producer_user_profile_id
        LIMIT 1
    )
    WHERE EXISTS (
        SELECT 1
        FROM node_info
        WHERE node_info.user_profile_id = usage_tokens.producer_user_profile_id
    );
    """
    )
    op.drop_constraint(
        "usage_tokens_producer_user_profile_id_fkey", "usage_tokens", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "usage_tokens", "node_info", ["producer_node_info_id"], ["id"]
    )
    op.drop_column("usage_tokens", "producer_user_profile_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "usage_tokens",
        sa.Column(
            "producer_user_profile_id", sa.UUID(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "usage_tokens", type_="foreignkey")
    op.create_foreign_key(
        "usage_tokens_producer_user_profile_id_fkey",
        "usage_tokens",
        "user_profile",
        ["producer_user_profile_id"],
        ["id"],
    )
    op.drop_column("usage_tokens", "producer_node_info_id")
    # ### end Alembic commands ###
